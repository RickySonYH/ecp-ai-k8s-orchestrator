# [advice from AI] ECP-AI Kubernetes Orchestrator - 완전한 개발 환경 구성
version: '3.8'

services:
  # PostgreSQL 데이터베이스 - ECP-AI 테넌시 및 메트릭 데이터 저장
  postgres:
    image: postgres:15-alpine
    container_name: ecp-postgres
    environment:
      POSTGRES_DB: ecp_orchestrator
      POSTGRES_USER: ecp_user
      POSTGRES_PASSWORD: ecp_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
      # 개발 환경용 추가 설정
      POSTGRES_HOST_AUTH_METHOD: trust
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql
      - ./config/dev-data.sql:/docker-entrypoint-initdb.d/02-dev-data.sql
    ports:
      - "5433:5432"
    networks:
      - ecp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecp_user -d ecp_orchestrator"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis 캐시 - 테넌시 상태 및 리소스 계산 캐시 (개발 환경 최적화)
  redis:
    image: redis:7-alpine
    container_name: ecp-redis
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 256mb 
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --loglevel notice
    environment:
      REDIS_REPLICATION_MODE: master
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - ecp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Server Resource Generator - 독립적인 하드웨어 계산 서비스
  hardware-calculator:
    build:
      context: ../Server Resource Generator
      dockerfile: Dockerfile
    container_name: ecp-hardware-calculator
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - ../Server Resource Generator/app:/app/app:rw
      - ../Server Resource Generator/logs:/app/logs:rw
      - ./backend/config:/app/config:ro
    ports:
      - "2992:8000"
    networks:
      - ecp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 백엔드 API 서버 - ECP-AI 오케스트레이션 엔진 (개발 환경)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: ecp-backend
    environment:
      # 데이터베이스 연결
      - DATABASE_URL=postgresql://ecp_user:ecp_password@postgres:5432/ecp_orchestrator
      - REDIS_URL=redis://redis:6379/0
      
      # ECP-AI 특화 설정
      - ECP_SERVICE_MATRIX_PATH=/app/config/ecp_service_matrix.json
      - K8S_CONFIG_PATH=/app/config/kubeconfig
      - TENANT_NAMESPACE_PREFIX=ecp-ai
      
      # 하드웨어 계산 서비스 연결 (외부 API로 변경)
      - HARDWARE_CALCULATOR_URL=http://rdc.rickyson.com:5001
      
      # 개발 환경 설정
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      
      # API 및 모니터링 설정
      - PROMETHEUS_ENABLED=true
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://frontend:3000
      - API_V1_PREFIX=/api/v1
      - DOCS_URL=/docs
      - REDOC_URL=/redoc
      
      # 개발용 디버깅
      - DEBUG=true
      - RELOAD=true
    volumes:
      # 핫 리로드를 위한 소스 코드 마운트
      - ./backend/app:/app/app:rw
      - ../models:/app/models:ro
      - ./config:/app/config:ro
      - ./logs:/app/logs:rw
      
      # Docker 접근 (개발용)
      - /var/run/docker.sock:/var/run/docker.sock
      # Kubernetes 접근 (선택사항 - 파일이 있는 경우만)
      # - ~/.kube/config:/app/config/kubeconfig:ro
      
      # 개발용 캐시 디렉토리
      - backend_cache:/app/.cache
    ports:
      - "8001:8000"  # [advice from AI] 포트 충돌 방지를 위해 8001번으로 변경
      - "8002:8001"  # 개발용 추가 포트
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      # hardware-calculator:
      #   condition: service_healthy
    networks:
      - ecp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # 프론트엔드 개발자 콘솔 - 테넌시 생성 및 모니터링 UI (개발 환경)
  frontend:
    build:
      context: ./frontend/developer-ui
      dockerfile: Dockerfile
    container_name: ecp-frontend
    environment:
      # API 연결 설정 (컨테이너 간 통신)
      - REACT_APP_API_BASE_URL=http://backend:8000
      - REACT_APP_WS_URL=ws://backend:8000/ws
      
      # ECP-AI UI 특화 설정
      - REACT_APP_SUPPORTED_GPU_TYPES=t4,v100,l40s
      - REACT_APP_TENANT_PRESETS=micro,small,medium,large
      - REACT_APP_SERVICES=callbot,chatbot,advisor,stt,tts,ta,qa
      - REACT_APP_VERSION=1.0.0
      - REACT_APP_TITLE=ECP-AI Kubernetes Orchestrator
      
      # 개발 환경 설정
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - GENERATE_SOURCEMAP=false
      - SKIP_PREFLIGHT_CHECK=true
      - WDS_SOCKET_HOST=localhost
      - WDS_SOCKET_PORT=3000
      # [advice from AI] 외부 도메인 접속을 위한 호스트 헤더 검증 우회
      - DANGEROUSLY_DISABLE_HOST_CHECK=true
      - HOST=0.0.0.0
      - WDS_SOCKET_HOST=rdc.rickyson.com
      - WDS_SOCKET_PORT=3002
      - CHOKIDAR_USEPOLLING=true
      - FAST_REFRESH=false
      
      # 개발용 디버깅
      - REACT_APP_DEBUG=true
      - BROWSER=none
    volumes:
      # 핫 리로드를 위한 소스 코드 마운트
      - ./frontend/developer-ui/src:/app/src:rw
      - ./frontend/developer-ui/public:/app/public:rw
      - ./frontend/developer-ui/package.json:/app/package.json:ro
      
      # node_modules 캐시 (성능 최적화)
      - frontend_node_modules:/app/node_modules
    ports:
      - "3002:3000"
    depends_on:
      - backend
    networks:
      - ecp-network
    stdin_open: true
    tty: true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Worker - 백그라운드 테넌시 배포 작업
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ecp-celery-worker
    command: celery -A app.core.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://ecp_user:ecp_password@postgres:5432/ecp_orchestrator
      - REDIS_URL=redis://redis:6379/0
      - ECP_SERVICE_MATRIX_PATH=/app/config/ecp_service_matrix.json
    volumes:
      - ./backend/app:/app/app
      - ./config:/app/config
      # - ~/.kube/config:/app/config/kubeconfig:ro
    depends_on:
      - postgres
      - redis
    networks:
      - ecp-network
    restart: unless-stopped
    profiles:
      - worker

  # Nginx 리버스 프록시 (프로덕션용)
  nginx:
    image: nginx:alpine
    container_name: ecp-nginx
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/developer-ui/build:/usr/share/nginx/html
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - ecp-network
    profiles:
      - production

  # Prometheus 모니터링 - ECP-AI 메트릭 수집
  prometheus:
    image: prom/prometheus:latest
    container_name: ecp-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ecp-network
    profiles:
      - monitoring
    restart: unless-stopped

  # Grafana 대시보드 - ECP-AI 시각화
  grafana:
    image: grafana/grafana:latest
    container_name: ecp-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/monitoring/grafana:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - ecp-network
    profiles:
      - monitoring
    restart: unless-stopped

networks:
  ecp-network:
    driver: bridge
    name: ecp-ai-network

# 개발 환경용 볼륨 정의
volumes:
  postgres_data:
    name: ecp-postgres-data
    driver: local
  redis_data:
    name: ecp-redis-data
    driver: local
  backend_cache:
    name: ecp-backend-cache
    driver: local
  frontend_node_modules:
    name: ecp-frontend-node-modules
    driver: local
  prometheus_data:
    name: ecp-prometheus-data
    driver: local
  grafana_data:
    name: ecp-grafana-data
    driver: local
